using System;
using System.Collections;
using System.Linq;
using System.Text;

namespace RadixSort
{

    class RadixSortion
    {
        public enum Cases { WORST, BEST, AVERAGE };

        public static int[] GenerateArray(int length, Cases cases)
        {
            int[] mas = new int[length];
            Random r = new Random();
            for (int i = 0; i < mas.Length; i++)
            {
                mas[i] = r.Next(0, 300000000);
            }

            if (cases == Cases.AVERAGE)
            {
                Array.Sort(mas);
                mas.Reverse();
                return mas;

            }

            else if (cases == Cases.BEST)
            {
                Array.Sort(mas);
                return mas;

            }

            else
            {
                return mas;
            }
        }

        public static void RadixSort(int[] mas)
        {

            int range = 10;
            ArrayList[] spisok = new ArrayList[range];
            for (int i = 0; i < 10; ++i)
                spisok[i] = new ArrayList();
            for (int step = 0; step < 10; ++step)
            {
                for (int i = 0; i < mas.Length; ++i)
                {
                    int tempor = (mas[i] % (int)Math.Pow(10, step + 1)) /
                                                  (int)Math.Pow(10, step);
                    spisok[tempor].Add(mas[i]);
                }
                int val = 0;
                for (int i = 0; i < 10; ++i)
                {
                    for (int j = 0; j < spisok[i].Count; ++j)
                    {
                        mas[val++] = (int)spisok[i][j];
                    }
                }
                for (int i = 0; i < 10; ++i)
                    spisok[i].Clear();
            }

        }



        public static bool isArrayCorrectSort(int[] ar, int[] orig)
        {
            Array.Sort(orig);

            for (int i = 0; i < ar.Length; i++)
            {
                if (ar[i] != orig[i])
                {
                    return false;
                }
            }

            return true;
        }

        public static int[] copyArray(int[] orig)
        {
            int[] newArray = new int[orig.Length];

            for (int i = 0; i < orig.Length; i++)
            {
                newArray[i] = orig[i];
            }

            return newArray;
        }


        static void Main(string[] args)
        {
            Console.WriteLine("Введите количество чисел для сортировки: ");

            int N = Convert.ToInt32(Console.ReadLine());

            int[] bestCaseArray = GenerateArray(N, Cases.BEST);

            // копируем созданный массив в копию
            int[] copyBestCaseArray = copyArray(bestCaseArray);

            System.Diagnostics.Stopwatch Time = new System.Diagnostics.Stopwatch();
            Time.Start();
            RadixSort(bestCaseArray);
            Time.Stop();

            Console.WriteLine("\nВремя сортировки для лучшего случая " + Time.Elapsed.TotalMilliseconds);

            // ПРОВЕРЯЕМ КОРРЕКТНОСТЬ СОРТИРОВКИ
            if (isArrayCorrectSort(bestCaseArray, copyBestCaseArray))
            {
                Console.WriteLine("CORRECT");
            }
            else
            {
                Console.WriteLine("INCORRECT");
            }


            int[] worstCaseArray = GenerateArray(N, Cases.WORST);


            Time.Start();
            RadixSort(worstCaseArray);
            Time.Stop();

            Console.WriteLine("\nВремя сортировки для среднего случая " + Time.Elapsed.TotalMilliseconds);


            int[] averageCaseArray = GenerateArray(N, Cases.AVERAGE);


            Time.Start();
            RadixSort(averageCaseArray);
            Time.Stop();

            Console.WriteLine("\nВремя сортировки для худшего случая " + Time.Elapsed.TotalMilliseconds); ;



            Console.ReadLine();

        }


    }

}
