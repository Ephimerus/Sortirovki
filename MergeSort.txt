using System;
using System.Collections;
using System.Linq;
using System.Text;

namespace Merge_Sort
{
    class Class1
    {

        public enum Cases { WORST, BEST, AVERAGE };

        static int[] Merge_Sort(int[] mas)
        {
            if (mas.Length == 1)
                return mas;

            int mid_point = mas.Length / 2;
            return Merge(Merge_Sort(mas.Take(mid_point).ToArray()), Merge_Sort(mas.Skip(mid_point).ToArray()));
        }

        public static int[] Merge(int[] mass1, int[] mass2)
        {
            int a = 0, b = 0;
            int[] merged = new int[mass1.Length + mass2.Length];
            for (int i = 0; i < mass1.Length + mass2.Length; i++)
            {
                if (b < mass2.Length && a < mass1.Length)
                    if (mass1[a] > mass2[b])
                        merged[i] = mass2[b++];
                    else //if int go for
                        merged[i] = mass1[a++];
                else
                  if (b < mass2.Length)
                    merged[i] = mass2[b++];
                else
                    merged[i] = mass1[a++];
            }
            return merged;
        }

        public static int[] GenerateArray(int length, Cases cases)
        {
            int[] mas = new int[length];
            Random r = new Random();
            for (int i = 0; i < mas.Length; i++)
            {
                mas[i] = r.Next(0, 300000000);
            }

            if (cases == Cases.WORST)
            {

                Array.Sort(mas);
                mas.Reverse();
                return mas;

            }

            else if (cases == Cases.BEST)
            {

                Array.Sort(mas);
                return mas;
            }
            else
            {

                return mas;
            }

        }

     public static bool isArrayCorrectSort(int[] ar, int[] orig)
        {
            Array.Sort(orig);

            for (int i = 0; i < ar.Length; i++)
            {
                if (ar[i] != orig[i])
                {
                    return false;
                }
            }

            return true;
        }

        public static int[] copyArray(int[] orig)
        {
            int[] newArray = new int[orig.Length];

            for (int i = 0; i < orig.Length; i++)
            {
                newArray[i] = orig[i];
            }

            return newArray;
        }
     

   static void Main(string[] args)
    {
        Console.WriteLine("Введите количество чисел для сортировки: ");

        int N = Convert.ToInt32(Console.ReadLine());

        int[] bestCaseArray = GenerateArray(N, Cases.BEST);

        // копируем созданный массив в копию
        int[] copyBestCaseArray = copyArray(bestCaseArray);

        System.Diagnostics.Stopwatch Time = new System.Diagnostics.Stopwatch();
        Time.Start();
        Merge_Sort(bestCaseArray);
        Time.Stop();

        Console.WriteLine("\nВремя сортировки для лучшего случая " + Time.Elapsed.TotalMilliseconds);

        // ПРОВЕРЯЕМ КОРРЕКТНОСТЬ СОРТИРОВКИ
        if (isArrayCorrectSort(bestCaseArray, copyBestCaseArray))
        {
            Console.WriteLine("CORRECT");
        }
        else
        {
            Console.WriteLine("INCORRECT");
        }


        int[] averageCaseArray = GenerateArray(N, Cases.WORST);

        Time.Start();
        Merge_Sort(averageCaseArray);
        Time.Stop();

        Console.WriteLine("\nВремя сортировки для среднего случая " + Time.Elapsed.TotalMilliseconds);


        int[] worstCaseArray = GenerateArray(N, Cases.AVERAGE);


        Time.Start();
        Merge_Sort(worstCaseArray);
        Time.Stop();


        Console.WriteLine("\nВремя сортировки для худшего случая " + Time.Elapsed.TotalMilliseconds);



        Console.ReadLine();
    }


    }

}