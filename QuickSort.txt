using System;
using System.Collections;
using System.Linq;
using System.Text;

class QuickSort
{
    public enum Cases { WORST, BEST, AVERAGE };


    public static void goodsorting(int[] mas, int left, int right)
    {
        int i = left; 
        int j = right;
        int tempor;
        double key = (mas[(right - left) / 2 + left]);
        

        while (i <= j)
        {
            while (mas[i] < key && i <= right) ++i;
            while (mas[j] > key && j >= left) --j;
            if (i <= j)
            {
                tempor = mas[i];
                mas[i] = mas[j];
                mas[j] = tempor;
                ++i;
                --j;
            }
        }
        //рекурсивные вызовы для половинок масива
        if (j > left) goodsorting(mas, left, j);
        if (i < right) goodsorting(mas, i, right);
    }



    static int[] GenerateArray(int length, Cases cases)
    {
        int[] mas = new int[length];
        Random r = new Random();
        for (int i = 0; i < mas.Length; i++)
        {
            mas[i] = r.Next(0, 300000000);
        }

        if (cases == Cases.WORST)
        {

            Array.Sort(mas);
            mas.Reverse();
            return mas;

        }

        else if (cases == Cases.BEST)
        {

            Array.Sort(mas);
            return mas;
        }
        else
        {

            return mas;
        }
    }

      public static bool isArrayCorrectSort(int[] ar, int[] orig)
        {
            Array.Sort(orig);

            for (int i = 0; i < ar.Length; i++)
            {
                if (ar[i] != orig[i])
                {
                    return false;
                }
            }

            return true;
        }

        public static int[] copyArray(int[] orig)
        {
            int[] newArray = new int[orig.Length];

            for (int i = 0; i < orig.Length; i++)
            {
                newArray[i] = orig[i];
            }

            return newArray;
        }
     
    

     static void Main(string[] args)
    {
        Console.WriteLine("Введите количество чисел для сортировки: ");

        int N = Convert.ToInt32(Console.ReadLine());

        int[] bestCaseArray = GenerateArray(N, Cases.BEST);

        // копируем созданный массив в копию
        int[] copyBestCaseArray = copyArray(bestCaseArray);

        System.Diagnostics.Stopwatch Time = new System.Diagnostics.Stopwatch();
        Time.Start();
        goodsorting(bestCaseArray,0,N-1);
        Time.Stop();

        Console.WriteLine("\nВремя сортировки для лучшего случая " + Time.Elapsed.TotalMilliseconds);

        // ПРОВЕРЯЕМ КОРРЕКТНОСТЬ СОРТИРОВКИ
        if (isArrayCorrectSort(bestCaseArray, copyBestCaseArray))
        {
            Console.WriteLine("CORRECT");
        }
        else
        {
            Console.WriteLine("INCORRECT");
        }


        int[] averageCaseArray = GenerateArray(N, Cases.WORST);

     

        Time.Start();
        goodsorting(averageCaseArray,0,N-1);
        Time.Stop();

        Console.WriteLine("\nВремя сортировки для среднего случая " + Time.Elapsed.TotalMilliseconds);


        int[] worstCaseArray = GenerateArray(N, Cases.AVERAGE);


        Time.Start();
        goodsorting(worstCaseArray,0,N-1);
        Time.Stop();


        Console.WriteLine("\nВремя сортировки для худшего случая " + Time.Elapsed.TotalMilliseconds); 



        Console.ReadLine();
    }

}